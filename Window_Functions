create database test;

use test;

create table customers
(
    id int,
    name varchar(50)
);

create table orders
(
    order_id int,
    amount int,
    cust_id int
);

insert into customers values(1,'John');

insert into customers values(2,'David');

insert into customers values(3,'Ronn');

insert into customers values(4,'Betty');


insert into orders values(1,100,10);

insert into orders values(2,500,3);

insert into orders values(3,300,6);

insert into orders values(4,800,2);

insert into orders values(5,350,1);

select * from orders;


select o.*, c.* from orders o inner join customers c 
on o.cust_id = c.id where o.amount>400;


#Window Functions
--Window Functions

create table shop_sales_data
(
sales_date date,
shop_id varchar(5),
sales_amount int
);

insert into shop_sales_data values('2022-02-14','S1',200);
insert into shop_sales_data values('2022-02-15','S1',300);
insert into shop_sales_data values('2022-02-14','S2',600);
insert into shop_sales_data values('2022-02-15','S3',500);
insert into shop_sales_data values('2022-02-18','S1',400);
insert into shop_sales_data values('2022-02-17','S2',250);
insert into shop_sales_data values('2022-02-20','S3',300);

-- Total count of sales for each shop using window function

-- Working functions - SUM(), MIN(), MAX(), COUNT(), AVG()

SELECT *,
    count(*) over(PARTITION BY shop_id) 'Total sales count by shops'
    from shop_sales_data;

#Using order by

SELECT *,
    sum(sales_amount) over(ORDER BY sales_amount) 'Total sales amount by shops'
    from shop_sales_data;

#Using both partition by and order by
#This givews running count with order by
SELECT *,
    sum(sales_amount) over(partition by shop_id ORDER BY sales_amount) 'Total sales sum by shops'
    from shop_sales_data;

--Amazon Sales Data -Sample

    create table amazon_sales_data
(
    sales_data date,
    sales_amount int
);

insert into amazon_sales_data values('2022-08-21',500);
insert into amazon_sales_data values('2022-08-22',600);
insert into amazon_sales_data values('2022-08-19',300);

insert into amazon_sales_data values('2022-08-18',200);

insert into amazon_sales_data values('2022-08-25',800);

select * from amazon_sales_data;

select *,
    AVG(sales_amount) OVER (ORDER BY sales_data) 'Rolling Avg by date',
    SUM(sales_amount) OVER (ORDER BY sales_data) 'Rolling Sum by date'
from amazon_sales_data;
where sales_data <'2022-08-25';



-- Rank(), Row_Number(), Dense_Rank() window functions

insert into shop_sales_data values('2022-02-19','S1',400);
insert into shop_sales_data values('2022-02-20','S1',400);
insert into shop_sales_data values('2022-02-22','S1',300);
insert into shop_sales_data values('2022-02-25','S1',200);
insert into shop_sales_data values('2022-02-15','S2',600);
insert into shop_sales_data values('2022-02-16','S2',600);
insert into shop_sales_data values('2022-02-16','S3',500);
insert into shop_sales_data values('2022-02-18','S3',500);
insert into shop_sales_data values('2022-02-19','S3',300);

select *,
    ROW_NUMBER() OVER (PARTITION BY shop_id ORDER BY sales_amount desc) as 'row_number',
    RANK() OVER (PARTITION BY shop_id ORDER BY sales_amount desc) as 'RANK',
    DENSE_RANK() OVER (PARTITION BY shop_id ORDER BY sales_amount desc) as 'DENSE_RANK'
 from shop_sales_data;



 create table employees
(
    emp_id int,
    salary int,
    dept_name VARCHAR(30)

);

insert into employees values(1,10000,'Software');
insert into employees values(2,11000,'Software');
insert into employees values(3,11000,'Software');
insert into employees values(4,11000,'Software');
insert into employees values(5,15000,'Finance');
insert into employees values(6,15000,'Finance');
insert into employees values(7,15000,'IT');
insert into employees values(8,12000,'HR');
insert into employees values(9,12000,'HR');
insert into employees values(10,11000,'HR');

select * from employees;


# Query - get one employee from each department who is getting maximum salary (employee can be random if salary is same)
select tmp.* FROM
(select *,
    row_number() over(partition by dept_name order by salary desc) as 'ROW_NUMBERS'
from employees) tmp
where tmp.ROW_NUMBERS = 1
order by emp_id;

--Query - Get all employees from each department who are getting maxuimum salary 
--(there can be more than one person getting same maximum salary)
select tmp.* FROM
(select *,
    rank() over(partition by dept_name order by salary desc) as 'rank_num'
from employees) tmp
where tmp.rank_num = 1;
--order by emp_id;

--Query - Get top 2 ranked employees from each department who are getting maxuimum salary 

select tmp.* FROM
(select *,
    DENSE_RANK() over(partition by dept_name order by salary desc) as 'dense_rank_num'
from employees) tmp
where tmp.dense_rank_num < 3;

select *,
    DENSE_RANK() over(partition by dept_name order by salary desc) as 'dense_rank_num'
from employees;
